package net.timm.blackforesttagmovementloggerdecoder.old;

import net.timm.blackforesttagmovementloggerdecoder.*;
import net.timm.blackforesttagmovementloggerdecoder.decoder.AccelerationDecoder;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.Locale;
import java.util.TimeZone;

import static java.lang.Math.toIntExact;

class DataStructure1Hz {
    public static final int TO_STRING_INDEX_MULTIPLIER = 2;

    public static final String startPrefix = "123456"; // 3 byte

    public static final int utcTimestampIndex = 3 * TO_STRING_INDEX_MULTIPLIER;
    public static final int utcTimestampLength = 4 * TO_STRING_INDEX_MULTIPLIER;

    public static final int lastErrorIdIndex = 7 * TO_STRING_INDEX_MULTIPLIER;
    public static final int lastErrorIdLength = 1 * TO_STRING_INDEX_MULTIPLIER;

    public static final int latTimes1MilIndex = 8 * TO_STRING_INDEX_MULTIPLIER;
    public static final int latTimes1MilLength = 4 * TO_STRING_INDEX_MULTIPLIER;

    public static final int lonTimes1MilIndex = 12 * TO_STRING_INDEX_MULTIPLIER;
    public static final int lonTimes1MilLength = 4 * TO_STRING_INDEX_MULTIPLIER;

    public static final int hdopTimesTenIndex = 16 * TO_STRING_INDEX_MULTIPLIER;
    public static final int hdopTimesTenLength = 1 * TO_STRING_INDEX_MULTIPLIER;

    public static final int currentFifoLenIndex = 17 * TO_STRING_INDEX_MULTIPLIER;
    public static final int currentFifoLenLength = 2 * TO_STRING_INDEX_MULTIPLIER;

    public static final long maxFifoLength = 1024;
}

class LogEntry1Hz {
    public long lastErrorId, utcTimestamp, latTimes1Mil, lonTimes1Mil, hdopTimesTen, fifoLen;
    public double lat, lon, hdop;
    private boolean plausibilityCheckOkay;
    public ArrayList<AccEntry> accEntries = new ArrayList<>();
    public double accMagnitudeSumWithoutEarthGravitation;
    private boolean decodeOnlyHeader;
    public String raw;

    public boolean isPlausible() { return plausibilityCheckOkay; }

    private void calculateAccMagnitudeSumWithoutEarthGravitation() {
        accMagnitudeSumWithoutEarthGravitation = 0;
        for(AccEntry a : accEntries) {
            accMagnitudeSumWithoutEarthGravitation += a.accCalculatedMagnitudeWithoutEarthGravitation;
        }
    }

    public LogEntry1Hz(String dataset, boolean decodeOnlyHeaderIn, boolean debug) {
        decodeOnlyHeader = decodeOnlyHeaderIn;
        raw = dataset;
        String startPrefix = dataset.substring(0, 6);
        if(!startPrefix.equals(DataStructure1Hz.startPrefix)) {
            if(debug) Log.d("decoder-plausibility", "wrong start prefix: " + startPrefix);
            plausibilityCheckOkay = false;
        }
        else {
            utcTimestamp = Long.parseLong(dataset.substring(DataStructure1Hz.utcTimestampIndex, DataStructure1Hz.utcTimestampIndex + DataStructure1Hz.utcTimestampLength), 16);
            lastErrorId = Long.parseLong(dataset.substring(DataStructure1Hz.lastErrorIdIndex, DataStructure1Hz.lastErrorIdIndex + DataStructure1Hz.lastErrorIdLength), 16);
            latTimes1Mil = Long.parseLong(dataset.substring(DataStructure1Hz.latTimes1MilIndex, DataStructure1Hz.latTimes1MilIndex + DataStructure1Hz.latTimes1MilLength), 16);
            lonTimes1Mil = Long.parseLong(dataset.substring(DataStructure1Hz.lonTimes1MilIndex, DataStructure1Hz.lonTimes1MilIndex + DataStructure1Hz.lonTimes1MilLength), 16);
            hdopTimesTen = Long.parseLong(dataset.substring(DataStructure1Hz.hdopTimesTenIndex, DataStructure1Hz.hdopTimesTenIndex + DataStructure1Hz.hdopTimesTenLength), 16);
            fifoLen = Long.parseLong(dataset.substring(DataStructure1Hz.currentFifoLenIndex, DataStructure1Hz.currentFifoLenIndex + DataStructure1Hz.currentFifoLenLength), 16);

            lat = latTimes1Mil / 1000000.;
            lon = lonTimes1Mil / 1000000.;
            hdop = hdopTimesTen / 10.;
            plausibilityCheckOkay = plausibilityCheck(this, debug);

            AccelerationDecoder.createAccData(dataset.substring(DataStructure1Hz.currentFifoLenIndex + DataStructure1Hz.currentFifoLenLength, DataStructure1Hz.currentFifoLenIndex + DataStructure1Hz.currentFifoLenLength + toIntExact(2 * fifoLen)), utcTimestamp, accEntries, 0, ConversionFactorToG.CONVERSION_FACTOR_MAX_8G);

            calculateAccMagnitudeSumWithoutEarthGravitation();
        }
    }

    public static int getFifoLengthInBytesFromHeaderString(String line) {
        long fifoLen = Long.parseLong(line.substring(DataStructure1Hz.currentFifoLenIndex, DataStructure1Hz.currentFifoLenIndex + DataStructure1Hz.currentFifoLenLength), 16);
        return toIntExact(fifoLen);
    }

    public static boolean plausibilityCheck(LogEntry1Hz e, boolean debug) {
        long timestampNowPlusOneDay = (System.currentTimeMillis() / 1000L) + (24*60*60);

        if((e.utcTimestamp < 1546300800) && (e.utcTimestamp > 1000000)) {
            if(debug) Log.d("decoder-plausibility", "timestamp not plausible "+e.utcTimestamp);
            if(debug) Log.d("decoder-plausibility", e.serializeOnlyHeader());
            if(debug) Log.d("decoder-plausibility", "Raw: " + e.raw);
            return false;
        }
        if(e.utcTimestamp > timestampNowPlusOneDay) {
            if(debug) Log.d("decoder-plausibility", "date not plausible "+e.utcTimestamp);
            if(debug) Log.d("decoder-plausibility", e.serializeOnlyHeader());
            if(debug) Log.d("decoder-plausibility", "Raw: " + e.raw);
            return false;
        }
        if(e.fifoLen == 0) {
            if(debug) Log.d("decoder-plausibility", "fifoLen not plausible "+e.fifoLen);
            if(debug) Log.d("decoder-plausibility", e.serializeOnlyHeader());
            if(debug) Log.d("decoder-plausibility", "Raw: " + e.raw);
            return false;
        }
        if(e.fifoLen > DataStructure1Hz.maxFifoLength) {
            if(debug) Log.d("decoder-plausibility", "fifoLen not plausible "+e.fifoLen);
            if(debug) Log.d("decoder-plausibility", e.serializeOnlyHeader());
            if(debug) Log.d("decoder-plausibility", "Raw: " + e.raw);
            return false;
        }
        return true;
    }

    public static int estimateDataOffsetFromFirstStreamBytes(String firstStreamData) {
        Log.d("decoder-estimate-offset", "first bytes: "+firstStreamData.substring(0, 120));

        while(true) {
            int foundStartIndex = firstStreamData.indexOf("123456"); // find header string
            if(foundStartIndex == -1) return -1;
            //System.out.println()
            if(foundStartIndex + (DataStructure1Hz.currentFifoLenIndex) + DataStructure1Hz.currentFifoLenLength > firstStreamData.length()) return -1;
            long fifoLength = Long.parseLong(firstStreamData.substring(foundStartIndex + DataStructure1Hz.currentFifoLenIndex, foundStartIndex + DataStructure1Hz.currentFifoLenIndex + DataStructure1Hz.currentFifoLenLength), 16);
            if((fifoLength < DataStructure1Hz.maxFifoLength) && (fifoLength > 0)) {
                Log.d("decoder-estimate-offset", "plausible offset @" + foundStartIndex + ", FIFOLEN: " + fifoLength);
                return foundStartIndex / 2;
            }
            firstStreamData = firstStreamData.substring(foundStartIndex + 6);
            System.out.println(firstStreamData.length());
        }
    }

    public static String utcTimestampToString(long utcTimestampIn) {
        utcTimestampIn *= 1000;
        SimpleDateFormat dateFormat = new SimpleDateFormat("E dd.MM.yy HH:mm:ss");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        return dateFormat.format(utcTimestampIn);
    }

    public static String utcTimestampToStringWithoutWeekday(long utcTimestampIn) {
        utcTimestampIn *= 1000;
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yy HH:mm:ss");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        return dateFormat.format(utcTimestampIn);
    }

    public static String utcTimestampToStringForFileName(long utcTimestampIn) {
        utcTimestampIn *= 1000;
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMdd_HHmmss");
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        return dateFormat.format(utcTimestampIn);
    }

    public static String serializeHeadlineOnlyHeader() {
        return "utcTimestamp," +
                "utcDate," +
                "lastErrorId," +
                "fifoLen," +
                "lat," +
                "lon," +
                "hdop," +
                "accAvgXinG," +
                "accAvgYinG," +
                "accAvgZinG," +
                "accAvgMagnitudeInG," +
                /*"tempDeviationMg," +*/
                "accMagnitudeSumWithoutEarthGravitation";
    }

    public String serializeOnlyHeader() {
        return utcTimestamp+","
                +utcTimestampToStringWithoutWeekday(utcTimestamp)+","
                +lastErrorId+","
                +fifoLen+","
                +(new Formatter(Locale.US).format("%.7f", lat))+","
                +(new Formatter(Locale.US).format("%.7f", lon))+","
                +(new Formatter(Locale.US).format("%.1f", hdop))+","
                +(new Formatter(Locale.US).format("%.7f", AccelerationDecoder.getAverageX(accEntries)))+","
                +(new Formatter(Locale.US).format("%.7f", AccelerationDecoder.getAverageY(accEntries)))+","
                +(new Formatter(Locale.US).format("%.7f", AccelerationDecoder.getAverageZ(accEntries)))+","
                +(new Formatter(Locale.US).format("%.7f", AccelerationDecoder.getAverageMagnitudeWithEarthGravitation(accEntries)))+","
                /*+(new Formatter(Locale.US).format("%.1f", (1 - AccelerationDecoder.getAverageMagnitudeWithEarthGravitation(accEntries)) * 1000.))+","*/
                +(new Formatter(Locale.US).format("%.3f", accMagnitudeSumWithoutEarthGravitation));
    }

    public static String serializeHeadlineWithAcc() {
        return serializeHeadlineOnlyHeader()+","+AccEntry.serializeHeadline();
    }

    public String serializeWithAcc() {
        String returnVal = "";
        for(AccEntry a : accEntries) {
            returnVal += serializeOnlyHeader() + "," + a.serialize() + "\n";
        }
        if(returnVal.length() > 0) returnVal = returnVal.substring(0, returnVal.length() - 1);
        return returnVal;
    }
}

class DataStream1Hz {
    byte[] stream;
    int estimatedDataOffset = 0;

    public boolean loadIntoFile(BufferedWriter writer, long selectedStartTimestamp, long selectedEndTimestamp, long limit, boolean onlyHeader) throws IOException {
        String line = "";
        int fifoLenFromCurrentLogEntry = 0;
        boolean foundFifoLen = false;
        LogEntryGeneral e;
        if(onlyHeader) writer.write(LogEntryGeneral.serializeHeadlineOnlyHeader()+"\n");
        else writer.write(LogEntryGeneral.serializeHeadlineWithAcc()+"\n");
        boolean useLimit = (limit > 0);
        int headerLength = DataStructure1Hz.currentFifoLenLength + DataStructure1Hz.currentFifoLenIndex;
        int entryCnt = 0;

        for(int i = estimatedDataOffset; i < stream.length; i++) {
            line += String.format("%02X", stream[i]);
            if(line.length() == headerLength) {
                fifoLenFromCurrentLogEntry = LogEntryGeneral.getFifoLengthInBytesFromHeaderString(line);
                foundFifoLen = true;
            }
            if(foundFifoLen && (line.length() == headerLength + (fifoLenFromCurrentLogEntry * 2))) {
                e = new LogEntryGeneral(line, onlyHeader, true);
                if(!e.isPlausible()){
                    Log.d("decoder", "log entry " + entryCnt + " not plausible");
                }
                else {
                    boolean doNotAddEntry = false;
                    if(selectedStartTimestamp > 0) {
                        if(e.utcTimestamp < selectedStartTimestamp) doNotAddEntry = true;
                    }
                    if(selectedEndTimestamp > 0) {
                        if(e.utcTimestamp > selectedEndTimestamp) {
                            return false;
                        }
                    }
                    if(doNotAddEntry) {
                        Log.d("decoder", "(skipped)");
                    }
                    else {
                        if(onlyHeader) writer.write(e.serializeOnlyHeader() + "\n");
                        else writer.write(e.serializeWithAcc() + "\n");
                        Log.d("decoder", "added " + e.serializeOnlyHeader() + " with " + e.accEntries.size() + " acc entries");
                    }
                }
                line = "";
                entryCnt++;
                foundFifoLen = false;
                if(useLimit) {
                    limit--;
                    if(limit == 0) break;
                }
            }
        }
        return true;
    }

    private int estimateDataOffset() {
        String line = "";
        for(int i = 0; i < 16000; i++) {
            line += String.format("%02X", stream[i]);
        }
        int offset = LogEntryGeneral.estimateDataOffsetFromFirstStreamBytes(line);
        return offset;
    }

    public DataStream1Hz(ArrayList<EspNowMessageGeneral> espNowMessageGenerals) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
        int firstSendPagePointer= 0, firstSendPageOffsetPointer = 0;
        boolean first = true;
        for(EspNowMessageGeneral e : espNowMessageGenerals) {
            if(e.isDataMessage) {
                if (first) {
                    first = false;
                    firstSendPagePointer = e.sendPagePointer;
                    firstSendPageOffsetPointer = e.sendPageOffsetPointer;
                }
                try {
                    outputStream.write(e.dataAsByteArray());
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
        }
        stream = outputStream.toByteArray();
        estimatedDataOffset = estimateDataOffset();
        if(estimatedDataOffset < 0) {
            Log.d("decoder", "WARNING: data offset could not be estimated (-1), using 0 instead");
            estimatedDataOffset = 0;
        }
        Log.d("decoder", "stream is " + stream.length + " Bytes long, starting at " + firstSendPagePointer + "/" + firstSendPageOffsetPointer + ", estimated data offset " + estimatedDataOffset);
    }
}

class EspNowMessage {
    public String receiveTime = "";
    public String mac = "";
    public ArrayList<Byte> data = new ArrayList<>();
    public boolean isDataMessage = false;
    public int receivedLength = 0;

    public int sendPagePointer = 0;
    public int sendPageOffsetPointer = 0;

    public static String byteArrayToHex(ArrayList<Byte>  a) {
        byte[] result = new byte[a.size()];
        for(int i = 0; i < a.size(); i++) {
            result[i] = a.get(i).byteValue();
        }
        StringBuilder sb = new StringBuilder(result.length * 2);
        for(byte b: a)
            sb.append(String.format("%02x", b));
        return sb.toString();
    }

    byte[] dataAsByteArray() {
        byte[] result = new byte[data.size()];
        for(int i = 0; i < data.size(); i++) {
            result[i] = data.get(i).byteValue();
        }
        return result;
    }

    void decodeMessage() {
        // 3 BYTES PREAMBLE: [ 0000 0000 ] [ 000 | 00000 ] [ 0 | 0000 | 111 ] (11 bits for block, 6 bits for page in block, 4 bits for page part, 3 dummy bits)
        if(data == null || data.size() < 3) return;

        if(isDataMessage) {
            int flashPnt =  (Byte.toUnsignedInt(data.get(1)) << 24) | (Byte.toUnsignedInt(data.get(2)) << 16) | (Byte.toUnsignedInt(data.get(3)) << 8) | (Byte.toUnsignedInt(data.get(4)));
            sendPagePointer = (flashPnt >> 15) & (0b11111111111111111); // 17 bit sendPagePointer
            sendPageOffsetPointer = (flashPnt >> 4) & (0b11111111111); // 11 bit sendPageOffsetPointer

            data.remove(0);
            data.remove(0);
            data.remove(0);
            data.remove(0);
            data.remove(0);
            receivedLength = data.size();
        }
        else {
            receivedLength = data.size();
        }
    }

    public void addData(Byte oneByte) {
        //int oneByteInt = (int) Integer.parseInt(oneByte,16);
        data.add(oneByte);
        if(data.size() == 1) {
            if(oneByte == (byte) 0xAB) isDataMessage = true;
            else isDataMessage = false;
        }
    }

    public void printMe() {
        if(isDataMessage) {
            Log.d("decoder", "Msg: " + receiveTime + ": " + mac + " (" + receivedLength + " byte, data),("+sendPagePointer+"/"+sendPageOffsetPointer+")," + byteArrayToHex(data));
        }
        else {
            Log.d("decoder", "Msg: " + receiveTime + ": " + mac + " (" + receivedLength + " byte, no data),"+ byteArrayToHex(data));
        }
    }
}

public class EspNow1HzSpecialModeDecoderCore {
    private ArrayList<EspNowMessageGeneral> espNowMessageGenerals = new ArrayList<>();
    boolean selectedFlashBlocksRemoved = false;
    private DataStreamGeneral dataStream = null;

    public DataStreamGeneral getDataStream() { return dataStream; }

    public boolean loadSelectedEspNowMessagesIntoDataStream() {
        if(!selectedFlashBlocksRemoved) {
            Log.d("decoder", "error - did not choose a tag yet!");
            return false;
        }
        /*if(!checkIfFlashBlocksAreConsecutive()) {
            Log.d("decoder", "WARNING: esp now check failed!");
        }*/
        dataStream = new DataStreamGeneral(espNowMessageGenerals);
        return true;
    }

    public void removeSelectedEspNowMessages(String selectedTagName) {
        int cntRemoved = 0;
        ArrayList<EspNowMessageGeneral> messagesToRemove = new ArrayList<>();
        for(EspNowMessageGeneral e : espNowMessageGenerals) {
            if(!e.mac.equals(selectedTagName)) {
                messagesToRemove.add(e);
                cntRemoved++;
            }
        }
        espNowMessageGenerals.removeAll(messagesToRemove);
        Log.d("decoder", "removed " + cntRemoved +  " messages (everything except from " + selectedTagName + " data)");
        selectedFlashBlocksRemoved = true;
    }

    public boolean checkIfFlashBlocksAreConsecutive() {
        if(!selectedFlashBlocksRemoved) {
            Log.d("decoder", "error - did not choose a tag yet!");
            return false;
        }
        boolean isFirst = true;
        int temp1 = 0, temp2 = 0, temp3 = 0;
        int estimatedNextAddress = 0;
        int cntRemovedDuplicates = 0;
        ArrayList<EspNowMessageGeneral> messagesToRemove = new ArrayList<>();
        for(EspNowMessageGeneral e : espNowMessageGenerals) {
            if(e.isDataMessage) {
                if (isFirst) {
                    isFirst = false;
                    temp1 = e.sendPagePointer;
                    temp2 = e.sendPageOffsetPointer;
                    temp3 = e.receivedLength;
                } else {
                    /*if (e.flashBlockPointer != ((temp1 + 1) % (64 * 2048))) {
                        System.out.println(temp1);
                        Log.d("decoder-check", "block error at flashBlock " + e.flashBlockPointer + ", flashPageInBlockPointer " + e.flashPageInBlockPointer + ", flashSubPagePointer " + e.flashSubPagePointer);
                        return false;
                    }
                    if (e.flashPageInBlockPointer != ((temp2 + 1) % 64)) {
                        System.out.println(temp2);
                        Log.d("decoder-check", "page error at flashBlock " + e.flashBlockPointer + ", flashPageInBlockPointer " + e.flashPageInBlockPointer + ", flashSubPagePointer " + e.flashSubPagePointer);
                        return false;
                    }*/
                    estimatedNextAddress = (temp1 * 2048) + temp2;
                    estimatedNextAddress += temp3;
                    if ((e.sendPagePointer * 2048) + e.sendPageOffsetPointer != estimatedNextAddress) {
                        Log.d("decoder-check", "subpage error at sendPagePointer " + e.sendPagePointer + " vs " + temp1 + ", sendPageOffsetPointer " + e.sendPageOffsetPointer + " vs. " + temp2);
                        if ((e.sendPagePointer * 2048) + e.sendPageOffsetPointer == (temp1 * 2048) + temp2) {
                            Log.d("decoder-check", "DUPLICATE -> REMOVE");
                            messagesToRemove.add(e);
                            cntRemovedDuplicates++;
                        }
                        else {
                            Log.d("decoder-check", "fatal error, not a duplicate");
                            return false;
                        }
                    }
                    temp1 = e.sendPagePointer;
                    temp2 = e.sendPageOffsetPointer;
                    temp3 = e.receivedLength;
                }
            }
        }
        espNowMessageGenerals.removeAll(messagesToRemove);
        Log.d("decoder-check", "removed " + cntRemovedDuplicates +  " messages (duplicates)");
        Log.d("decoder-check", "all messages are consecutive!");
        return true;
    }

    public boolean loadEspNowMessagesIntoFlashBlock(boolean debug) {
        for(EspNowMessageGeneral e : espNowMessageGenerals) {
            if(e.isDataMessage) {
                if (debug) {
                    System.out.println(e.sendPagePointer + ", " + e.sendPageOffsetPointer);
                }
            }
        }
        return true;
    }

    public boolean loadFileBytesIntoEspNowMessages(byte[] fileData, ArrayList<String> macs,  boolean debug) {
        Log.d("decoder", "file length: " + fileData.length + " bytes");

        int mode = 0;
        int modeCnt = 0;
        int msgLength = 0;

        EspNowMessageGeneral e = new EspNowMessageGeneral();

        for(int i = 0; i < fileData.length; i++) {
            if(mode == 0) { // receive time
                e.receiveTime += String.format("%02X", fileData[i]);
                modeCnt++;
                if(modeCnt >= 4) {
                    mode = 1;
                    modeCnt = 0;
                }
            }
            else if(mode == 1) { // MAC
                if(modeCnt < 5) e.mac += String.format("%02X", fileData[i]) + ":";
                else e.mac += String.format("%02X", fileData[i]);
                modeCnt++;
                if(modeCnt >= 6) {
                    mode = 2;
                    modeCnt = 0;
                }
            }
            else if(mode == 2) { // LENGTH
                msgLength = Byte.toUnsignedInt(fileData[i]);
                modeCnt = 0;
                mode = 3;
            }
            else if(mode == 3) { // DATA
                //String val = String.format("%02X", fileData[i]);
                e.addData(fileData[i]);
                modeCnt++;
                if(modeCnt >= msgLength) {
                    modeCnt = 0;
                    mode = 0;
                    e.decodeMessage();
                    espNowMessageGenerals.add(e);
                    if(debug) e.printMe();
                    if(!macs.contains(e.mac)) macs.add(e.mac);
                    // ONLY FOR TESTING!!
                    //if(e.sendPagePointer > 60000) { return true; }
                    e = new EspNowMessageGeneral();
                }
            }
        }
        return true;
    }
}
